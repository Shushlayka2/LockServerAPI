begin transaction;

drop table if exists referencedata.users cascade;
drop table if exists referencedata.locks cascade;
drop table if exists referencedata.codes cascade;
drop view if exists referencedata.decrypted_codes;
drop trigger if exists encrypt_user on referencedata.users;
drop trigger if exists encrypt_code on referencedata.codes;
drop trigger if exists encrypt_lock on referencedata.locks;
drop function if exists encrypt_user();
drop function if exists encrypt_code();
drop function if exists encrypt_lock();
drop function if exists search_user(text, text);
drop function if exists search_code(text);
drop function if exists edit_code(numeric, text, text, text);
drop function if exists remove_code(text, text);
drop function if exists search_device(text);
drop extension if exists pgcrypto;

create table referencedata.users
(
  id serial primary key,
  username text not null unique,
  password text not null
);

create table referencedata.locks
(
  id text primary key,
  device_id text not null unique,
  config text not null unique
);

create table referencedata.codes
(
  id serial primary key,
  code text not null unique,
  lock_id text not null unique,
  config text not null unique
);

create extension pgcrypto;

create or replace function encrypt_user() returns trigger as $encrypt_user$
begin
    new.password = crypt(new.password, gen_salt('bf'));
    return new;
end;
$encrypt_user$ language plpgsql;

create trigger encrypt_user before insert or update on referencedata.users
for each row execute procedure encrypt_user();

create or replace function search_user(username_param text, password_param text)
returns boolean as $$
begin
    perform  from referencedata.users where username = username_param and password = crypt(password_param, password);
    return FOUND;
end;
$$ language plpgsql;

create or replace function encrypt_code() returns trigger as $encrypt_code$
begin
    new.code = pgp_pub_encrypt(new.code, dearmor('-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFzML9EBCACr0Zt4SzFS9BP8oB9oVKqBgw2NPGtOwHl6AVLeNmw6XHhShfnZ
Bk0ZxcXNz8iHBHBXa8E6HbW7BXSlIvFCbhGr6OqqNtoFwBKqNXCZ/ClkAzJCZ2bF
pp2vuZCWV9w9szGrBsEXJ6/xwuAqHCs6gDRizhMJaxKa3BEJu7XBujDRj+qXVovl
33HREn2/eDN/RimNqGPk0MQhA3WFCpNHjtEMlaHQoaq2sH7hjvBop99VaNbczhzO
AVNz2n4LIUxdf6/h370qwLcEneKbNc2EZmZuti8oWaRLNUX+ARGaj4KBqmVpUEdI
ge9ouymH0+QV2AShS1yteZYibAAvOQq+InRpABEBAAG0JkxhdHlwb3YgQnVsYXQg
PEJTTGF0eXBvdkBzdHVkLmtwZnUucnU+iQFUBBMBCAA+FiEEU4mWqe/mHH80P86A
CPQVGCFcK8AFAlzML9ECGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AA
CgkQCPQVGCFcK8BxAggAjbdVhXNyNhq5suR68Hqbjv0igEA4ufHw+GdWxOqWI09u
6fLcvVVHJQiKtckwLPuNJNBnxcbIIFaVL26vs+gZouEr2RgWBrbpgAOKX6FUoi27
5WHBxOqAvfDg68Miarsoa0tzECk3j0KKCHxZA38Iwf52/zjEF7MkzGrsBWnR0SBd
Viuyr/rl0ZzPu2DEGa4WDn8/f7mX93ZWIJ5E3cx72I9pjUFhN3n981u+E2vybl8P
sZCwkmN4T/aYtxoE9GVEQPYsHtt2FGbNGpR1AftDZtYhQDAP62ZR68bO2RB/HQ7B
u+7PFLg6nMWUHsbvul0Ba5+OBLoBEUoKS60dW7OssrkBDQRczC/RAQgAw1j5vZEd
aeobzzsYL9c56816rGPpXbaOUjAX7IVZYAbVbLPBx0lxZ0SADmTHHh3CVHYVFElG
Hs4u0IcE2c7JnoSJpnSQoW3lMGdduIt5Ogrnc8ETwNQffJUDABrP/B1YrbOVNMOF
XokUu8qIVpOmqL/Lqym982zZjExZdInok7izlYua4tCxrVEY/UR06bs2MmMM/S4R
yI2rRgRxPdNjbnPhlxhpATY9LnsUCT77hUhdwMXLwWMvhqPhSypakgiXkg9Xy1eT
Ar4SvT3XD/myVHqTbnHF7v61tcMVqV6f+Xnjf2IBzaXizeF7cyck3S0+yN9Ggs/r
xCR/tEYtBSIf1QARAQABiQE8BBgBCAAmFiEEU4mWqe/mHH80P86ACPQVGCFcK8AF
AlzML9ECGwwFCQPCZwAACgkQCPQVGCFcK8BJ/wf+P6koAkP/C99nwGtBDJd20A/Y
SFH2zEW1Iz2gRR4x71263+47d4KojKJmQD+TAGjk8ktYS5qMDW2QQ5exd0cf9dlg
mf138Lcxk37X9zdL3JH09r31fCge5/lkdgyRy3zROA71liY8KTtXDVo4UIgBQ0iO
mmeN5iQyA5RvzUKgYbwBvup5PgeLAzyqJQiyjKigA+/e1sk15TytrI2a4Gki+obT
xeRhyJqiQp/P03e9Tff8rX02SjyOIv+ryZKJ8JBWwTkvA/1JfNK0bbeaQN2ca5f9
+sY6PKErUS441BjkKRZ2kbRopfqZIABD5J/VPMru4HjCeReNe0/dOgad+ATIyQ==
=UHza
-----END PGP PUBLIC KEY BLOCK-----
'));
    new.config = pgp_pub_encrypt(new.config, dearmor('-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFzML9EBCACr0Zt4SzFS9BP8oB9oVKqBgw2NPGtOwHl6AVLeNmw6XHhShfnZ
Bk0ZxcXNz8iHBHBXa8E6HbW7BXSlIvFCbhGr6OqqNtoFwBKqNXCZ/ClkAzJCZ2bF
pp2vuZCWV9w9szGrBsEXJ6/xwuAqHCs6gDRizhMJaxKa3BEJu7XBujDRj+qXVovl
33HREn2/eDN/RimNqGPk0MQhA3WFCpNHjtEMlaHQoaq2sH7hjvBop99VaNbczhzO
AVNz2n4LIUxdf6/h370qwLcEneKbNc2EZmZuti8oWaRLNUX+ARGaj4KBqmVpUEdI
ge9ouymH0+QV2AShS1yteZYibAAvOQq+InRpABEBAAG0JkxhdHlwb3YgQnVsYXQg
PEJTTGF0eXBvdkBzdHVkLmtwZnUucnU+iQFUBBMBCAA+FiEEU4mWqe/mHH80P86A
CPQVGCFcK8AFAlzML9ECGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AA
CgkQCPQVGCFcK8BxAggAjbdVhXNyNhq5suR68Hqbjv0igEA4ufHw+GdWxOqWI09u
6fLcvVVHJQiKtckwLPuNJNBnxcbIIFaVL26vs+gZouEr2RgWBrbpgAOKX6FUoi27
5WHBxOqAvfDg68Miarsoa0tzECk3j0KKCHxZA38Iwf52/zjEF7MkzGrsBWnR0SBd
Viuyr/rl0ZzPu2DEGa4WDn8/f7mX93ZWIJ5E3cx72I9pjUFhN3n981u+E2vybl8P
sZCwkmN4T/aYtxoE9GVEQPYsHtt2FGbNGpR1AftDZtYhQDAP62ZR68bO2RB/HQ7B
u+7PFLg6nMWUHsbvul0Ba5+OBLoBEUoKS60dW7OssrkBDQRczC/RAQgAw1j5vZEd
aeobzzsYL9c56816rGPpXbaOUjAX7IVZYAbVbLPBx0lxZ0SADmTHHh3CVHYVFElG
Hs4u0IcE2c7JnoSJpnSQoW3lMGdduIt5Ogrnc8ETwNQffJUDABrP/B1YrbOVNMOF
XokUu8qIVpOmqL/Lqym982zZjExZdInok7izlYua4tCxrVEY/UR06bs2MmMM/S4R
yI2rRgRxPdNjbnPhlxhpATY9LnsUCT77hUhdwMXLwWMvhqPhSypakgiXkg9Xy1eT
Ar4SvT3XD/myVHqTbnHF7v61tcMVqV6f+Xnjf2IBzaXizeF7cyck3S0+yN9Ggs/r
xCR/tEYtBSIf1QARAQABiQE8BBgBCAAmFiEEU4mWqe/mHH80P86ACPQVGCFcK8AF
AlzML9ECGwwFCQPCZwAACgkQCPQVGCFcK8BJ/wf+P6koAkP/C99nwGtBDJd20A/Y
SFH2zEW1Iz2gRR4x71263+47d4KojKJmQD+TAGjk8ktYS5qMDW2QQ5exd0cf9dlg
mf138Lcxk37X9zdL3JH09r31fCge5/lkdgyRy3zROA71liY8KTtXDVo4UIgBQ0iO
mmeN5iQyA5RvzUKgYbwBvup5PgeLAzyqJQiyjKigA+/e1sk15TytrI2a4Gki+obT
xeRhyJqiQp/P03e9Tff8rX02SjyOIv+ryZKJ8JBWwTkvA/1JfNK0bbeaQN2ca5f9
+sY6PKErUS441BjkKRZ2kbRopfqZIABD5J/VPMru4HjCeReNe0/dOgad+ATIyQ==
=UHza
-----END PGP PUBLIC KEY BLOCK-----
'));
    return new;
end;
$encrypt_code$ language plpgsql;

create trigger encrypt_code before insert or update on referencedata.codes
for each row execute procedure encrypt_code();

create or replace view referencedata.decrypted_codes as
  select id, pgp_pub_decrypt(code::bytea, dearmor('-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=Mb/l
-----END PGP PRIVATE KEY BLOCK-----
'), 'asehan57') as code, lock_id, pgp_pub_decrypt(config::bytea, dearmor('-----BEGIN PGP PRIVATE KEY BLOCK-----

lQPGBFzML9EBCACr0Zt4SzFS9BP8oB9oVKqBgw2NPGtOwHl6AVLeNmw6XHhShfnZ
Bk0ZxcXNz8iHBHBXa8E6HbW7BXSlIvFCbhGr6OqqNtoFwBKqNXCZ/ClkAzJCZ2bF
pp2vuZCWV9w9szGrBsEXJ6/xwuAqHCs6gDRizhMJaxKa3BEJu7XBujDRj+qXVovl
33HREn2/eDN/RimNqGPk0MQhA3WFCpNHjtEMlaHQoaq2sH7hjvBop99VaNbczhzO
AVNz2n4LIUxdf6/h370qwLcEneKbNc2EZmZuti8oWaRLNUX+ARGaj4KBqmVpUEdI
ge9ouymH0+QV2AShS1yteZYibAAvOQq+InRpABEBAAH+BwMCgrb1vT1wvM/KKTbt
OHH37J4Mba3GzVcJ+3w2xkJSDcMHjRn3QISgTne7jHq0bbv51pmfH9KpOWsjHRRu
rEyE2pvh0pqERRBSB7aaotoq5zYv6rqA3J/Bxw3Vbfgotwvq/3xU7lEEclvkjMaX
esz5UXc7A4TBMom4oNAWRuBKUpfsIE9CzluvF4MnK6OCDK1tbGB8qI4oMGCbP25f
jZRidcqogZAlxSBA1PU7YH0ja7i25t00fG6iEwKIZO9A9UxhksBTzWIYAySedqN9
Bnqpdv95kH1TGGS22T7Tep2hCm09vblGCm85kZapyr9q+KqtpYnDBQs6Pim3cplh
r94Z2O61Q+r4XabbDiGVdttNlWwEpUboHjEVUjMiluQ1EN38JJsbvKvKro+CMLuk
bdg7x5WfXBOAErt7bnoI+jyH2hJKI6iBw18Sa/kp5/x10JG6TjdR4dC++J47NEIQ
NnFCxTdzKTV7VB+luVozGFOZVjjXVpyRMh3+MOxMKJBPsb+o1K4H7vibkfhUSf8s
1eEG+rL2M3SNJZ10jnNX5aCIeP0v4qTo+AYZqcfaY/+FsvrQq8g1fsfhi9APlydz
2K7xdtaGD56r1JmkCD/ZvgNACXj0fAU3++9kmimUKV66eb7U9R1y1BAPi9piYFey
wH7EHt2HyxdQdOlVLk8RPdQSXIF63X0mdYSUHcBH6SvsJMvW3KJpFumR3cDeAtSq
YPv2hqV7sVo2hfSfvttoXar525sBryookQ7HZg14U0Gl5NHPZyFRlUIVfuYC5TyT
CtHymw65EMwZNKoCG9ad5UDs6fsHgnR2T0D0JZPk1Phsb8ZL/1PINUnDX6jefSsa
pE8vceMkF7Nc6U72Oiy7VdXBEfZprJKgWVvm0KsyH0Z4BzLT9HLoXdozjfiQcfeJ
oNlHvKyLDgnNtCZMYXR5cG92IEJ1bGF0IDxCU0xhdHlwb3ZAc3R1ZC5rcGZ1LnJ1
PokBVAQTAQgAPhYhBFOJlqnv5hx/ND/OgAj0FRghXCvABQJczC/RAhsDBQkDwmcA
BQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEAj0FRghXCvAcQIIAI23VYVzcjYa
ubLkevB6m479IoBAOLnx8PhnVsTqliNPbuny3L1VRyUIirXJMCz7jSTQZ8XGyCBW
lS9ur7PoGaLhK9kYFga26YADil+hVKItu+VhwcTqgL3w4OvDImq7KGtLcxApN49C
igh8WQN/CMH+dv84xBezJMxq7AVp0dEgXVYrsq/65dGcz7tgxBmuFg5/P3+5l/d2
ViCeRN3Me9iPaY1BYTd5/fNbvhNr8m5fD7GQsJJjeE/2mLcaBPRlRED2LB7bdhRm
zRqUdQH7Q2bWIUAwD+tmUevGztkQfx0OwbvuzxS4OpzFlB7G77pdAWufjgS6ARFK
CkutHVuzrLKdA8YEXMwv0QEIAMNY+b2RHWnqG887GC/XOevNeqxj6V22jlIwF+yF
WWAG1WyzwcdJcWdEgA5kxx4dwlR2FRRJRh7OLtCHBNnOyZ6EiaZ0kKFt5TBnXbiL
eToK53PBE8DUH3yVAwAaz/wdWK2zlTTDhV6JFLvKiFaTpqi/y6spvfNs2YxMWXSJ
6JO4s5WLmuLQsa1RGP1EdOm7NjJjDP0uEciNq0YEcT3TY25z4ZcYaQE2PS57FAk+
+4VIXcDFy8FjL4aj4UsqWpIIl5IPV8tXkwK+Er091w/5slR6k25xxe7+tbXDFale
n/l5439iAc2l4s3he3MnJN0tPsjfRoLP68Qkf7RGLQUiH9UAEQEAAf4HAwLmxff7
T1PruMrv5bGxDQ3ShkcjfAs4FUNoQkc9cWMs/hpI7ocDbFvMMyXkGn3TDjq+M+xU
vE8gKSC4b5bF/hDcmPMTQ2ALxQnN/kHzxII3hOzy7IhJ6UfuRs8BxYlUhOOgm74s
/k6NulbrPKv2dDKwb8whRjbeoTuDZ9S5VcrTLmJL243cK8m4jhso6xyWtdJh2Wjv
K7hjR6TcXmNIBQHcrz5EJdrbtGtgG6im71GKR6LPJ7OqKVFdhg9RxT630pP33lZi
DFZpYq5iPFb9HAgaYcpQJor6/TkAZcrc1LSA5XL6oBWn/ntsYUc1ZdfQT5Nw0rpO
5NzFEz80MNbz4VBszAjygPeASjJBj49hE5sNln1W1MlDmHuoB/3AL/seACAQf/Z+
l46UTTtaByIKGlCbJpNioqFwF88i8uB9FB8LgT/YdsUZxbr1qfG+lSHJphw32nYB
kmgknMCdExrSKCVYu3DsqPWawMFl9NDtego0bkKKKpMB4/hYyueQm6yQsbe4eYK2
5+MJ2/9IBRzjaCRgEqzQi+iVfEtAnfkvR58vx6AfV1KA/1U/8GzUOhtW5hmfpztT
c7cb12q5cnX+evsWqGZZU4ucnyw5H8ONVw174iYABpyQxrBBRqU1FgHXMM2uzUTj
LG703+zFu4bK1wgcegZbZxhmKYgd5jqIUZdGQ/tQj1p9IUkIcBmpDxDVW3dLWK2u
YT/eOB+Zm7H12obzKgm67gYAckoClHye0YB5xvRhdgPItkHZE98Iy+XJMQiFE1gI
0ytAlyHRcdoF8GKtyEqsTNSByKvB9zlBRGHB9BHSh52b6IzE1bKDDlnQVAcLpMfX
d/t9gLDNe3FQOnSaqXo50/FqilWY7lDJ8B1GUQGBXHKikY4SXLaE7NNXYCnprHQI
Dz1MKWcH089Xlv+5jGM0kzeJATwEGAEIACYWIQRTiZap7+YcfzQ/zoAI9BUYIVwr
wAUCXMwv0QIbDAUJA8JnAAAKCRAI9BUYIVwrwEn/B/4/qSgCQ/8L32fAa0EMl3bQ
D9hIUfbMRbUjPaBFHjHvXbrf7jt3gqiMomZAP5MAaOTyS1hLmowNbZBDl7F3Rx/1
2WCZ/XfwtzGTftf3N0vckfT2vfV8KB7n+WR2DJHLfNE4DvWWJjwpO1cNWjhQiAFD
SI6aZ43mJDIDlG/NQqBhvAG+6nk+B4sDPKolCLKMqKAD797WyTXlPK2sjZrgaSL6
htPF5GHImqJCn8/Td71N9/ytfTZKPI4i/6vJkonwkFbBOS8D/Ul80rRtt5pA3Zxr
l/36xjo8oStRLjjUGOQpFnaRtGil+pkgAEPkn9U8yu7geMJ5F417T906Bp34BMjJ
=Mb/l
-----END PGP PRIVATE KEY BLOCK-----
'), 'asehan57') as config
  from referencedata.codes;

create or replace function search_code(code_param text, out lock_id_r text, out config_r text) as $$
begin
  select lock_id, config into lock_id_r, config_r from referencedata.decrypted_codes where code_param = code;
end;
$$ language plpgsql;

create or replace function edit_code(id_param numeric, code_param text, lock_id_param text, config_param text)
returns void as $$
begin
    update referencedata.codes set code = code_param, lock_id = lock_id_param, config = config_param
      where id = id_param;
end;
$$ language plpgsql;

create or replace function remove_code(code_param text, lock_id_param text)
returns void as $$
begin
    delete from referencedata.codes
    where lock_id = (select lock_id_r from search_code(code_param)) and lock_id = lock_id_param;
end;
$$ language plpgsql;

create or replace function encrypt_lock() returns trigger as $encrypt_lock$
begin
    new.device_id = crypt(new.device_id, gen_salt('bf'));
    new.config = crypt(new.config, gen_salt('bf'));
    return new;
end;
$encrypt_lock$ language plpgsql;

create trigger encrypt_lock before insert or update on referencedata.locks
for each row execute procedure encrypt_lock();

create or replace function search_device(text)
returns boolean as $$
begin
    perform  from referencedata.locks where id = crypt($1, id);
    return FOUND;
end;
$$ language plpgsql;

commit;